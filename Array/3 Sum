class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        if(nums==null || nums.length<3) return new ArrayList<>();

        Arrays.sort(nums);
        Set<List<Integer>> result= new HashSet<>();

        //fix the first element and find the other 2 elements
        for(int i=0;i<nums.length-2;i++){
            //find other two element using two sum approach
            int left=i+1;
            int right=nums.length-1;

            while(left<right){
                int sum=nums[i]+nums[left]+nums[right];

                if(sum==0){
                    result.add(Arrays.asList(nums[i],nums[left],nums[right]));
                    left++;
                    right--;
                }else if(sum<0){
                    left++;
                }else{
                    right--;
                }
            }
        }
        return new ArrayList<>(result);
    }
}
ðŸ§  Time Complexity (TC):
	1.	Sorting step:
Arrays.sort(nums) â†’ O(n log n)
	2.	Outer loop:
Runs n - 2 times â†’ roughly O(n)
	3.	Inner two-pointer loop:
For each fixed i, the left and right pointers move at most n steps total.
âžœ So inner part = O(n)

Putting it together:O(n log n) + O(n * n) = O(nÂ²)

SC:O(N)
