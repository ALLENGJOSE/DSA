class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        
        Set<Integer> set= new HashSet<>();
        for(int n2:nums2){
            set.add(n2);
        }
        ArrayList<Integer> list=new ArrayList<>();//bcz rn idk how many common elements are present in both
        for(int n1:nums1){
            if(set.contains(n1)){
                list.add(n1);
                set.remove(n1);
            }
        }
        int result[]=new int[list.size()];
        for(int i=0;i<list.size();i++){
            result[i]=list.get(i);
        }
        return result;
    }
}
âœ… Time Complexity (TC):
	1.	for(int n2 : nums2) â†’ O(m)
â†’ inserting all elements of nums2 into a HashSet (where m = nums2.length)
	2.	for(int n1 : nums1) â†’ O(n)
â†’ checking and removing elements from the set (each contains() and remove() is O(1) on average)
	3.	for(int i = 0; i < list.size(); i++) â†’ O(k)
â†’ copying list elements to the result array (k â‰¤ min(n, m))

ðŸ“Š Total Time Complexity:
ðŸ‘‰ O(n + m)
(since O(k) is small compared to n and m)

â¸»

ðŸ’¾ Space Complexity (SC):
	â€¢	HashSet â†’ O(m) (stores all elements of nums2)
	â€¢	ArrayList â†’ O(k) (stores common elements)

ðŸ“Š Total Space Complexity:
ðŸ‘‰ O(m + k)
â†’ or simplified as O(n) in the worst case.
