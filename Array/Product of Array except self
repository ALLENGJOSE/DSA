class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int[] left=new int[nums.length];
        int[] right= new int[nums.length];

        left[0]=1;
        for(int i=1;i<nums.length;i++){
            left[i]=left[i-1]*nums[i-1];
        }
        right[nums.length-1]=1;
        for(int i=nums.length-2;i>-1;i--){
            right[i]=right[i+1]*nums[i+1];
        }
        int[] ans= new int[nums.length];
        for(int i=0;i<nums.length;i++){
            ans[i]=left[i]*right[i];
        }
        return ans;
    }
}
🧠 Time Complexity (TC):
	•	First loop → O(n) (builds left[])
	•	Second loop → O(n) (builds right[])
	•	Third loop → O(n) (builds ans[])
➡️ Total TC = O(n)

💾 Space Complexity (SC):
	•	left[] → size n
	•	right[] → size n
	•	ans[] → size n (output array — usually not counted toward extra space)

➡️ Extra SC = O(n + n) = O(n)

If interviewer asks for total space including output, then O(3n) → still O(n) asymptotically.
