class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
     return helper(text1, text2, text1.length(),text2.length());
    }

    private int helper(String a, String b, int i, int j){
        if(i==0 || j==0) return 0;

        if(a.charAt(i-1)==b.charAt(j-1)){
           return 1+helper(a,b,i-1,j-1);
        }else{
            return Math.max(helper(a,b,i-1,j),helper(a,b,i,j-1));
        }
    }
}
⏱️ Time Complexity
	•	Each call can branch into two recursive calls.
	•	So in the worst case, it explores roughly 2^(min(n, m)) subproblems.

👉 Time Complexity = O(2^(min(n, m)))

This is very slow for large strings.

💾 Space Complexity
	•	The recursion call stack can go up to depth O(n + m) (since you reduce one index at a time).

👉 Space Complexity = O(n + m)
