Brute Force:
class Solution {
    public boolean isPalindrome(String s) {

        s=s.toLowerCase();
        s=s.replaceAll("[^a-z0-9]","");
    //•	[a-z0-9] → means “any lowercase letter or digit”
	//^ inside the brackets → means “NOT”
	//So [^a-z0-9] → means “anything that’s not a letter or number”
        
        String str1="";
        for(int i=s.length()-1;i>=0;i--){
            str1 += s.charAt(i);
        }
        if(str1.equals(s)){
            return true;
        }
        return false;
    }
}
Time and Space Complexity Analysis
Time Complexity: O(n²)
Breaking it down:

s.toLowerCase() → O(n)
s.replaceAll("[^a-z0-9]","") → O(n)
String concatenation loop → O(n²) ⚠️

The loop runs n times
Each str1 += s.charAt(i) creates a new string object (strings are immutable in Java)
So you're doing: n + (n-1) + (n-2) + ... + 1 = O(n²) operations


str1.equals(s) → O(n)

Overall: O(n²) due to the string concatenation in the loop.
Space Complexity: O(n)

s.toLowerCase() creates a new string → O(n)
s.replaceAll() creates another string → O(n)
str1 eventually becomes length n → O(n)
Total: O(n) auxiliary space


🚀 Optimization Suggestion
You can improve this to O(n) time using a two-pointer approach:
javaclass Solution {
    public boolean isPalindrome(String s) {
        s = s.toLowerCase();
        s = s.replaceAll("[^a-z0-9]", "");
        
        int left = 0, right = s.length() - 1;
        
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

TC:O(N)
SC:O(N)
